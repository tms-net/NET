// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TMSStudens;

namespace TMS.NET06.Lesson26.EFCore.Migrations
{
    [DbContext(typeof(TMSContext))]
    [Migration("20210405163244_AddStudentShortBio")]
    partial class AddStudentShortBio
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TMSStudens.Homework", b =>
                {
                    b.Property<int>("HomeworkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool?>("IsCompleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsComplete");

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("NewStudentId")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HomeworkId");

                    b.HasIndex("Name");

                    b.HasIndex("NewStudentId");

                    b.ToTable("homeworks");
                });

            modelBuilder.Entity("TMSStudens.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LastName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("last_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShortBio")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("StudentId");

                    b.HasIndex("Name", "LastName")
                        .IsUnique()
                        .HasFilter("[last_name] IS NOT NULL")
                        .HasAnnotation("SqlServer:Include", new[] { "BirthDate" });

                    b.ToTable("Students");
                });

            modelBuilder.Entity("TMSStudens.StudentAvatar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique()
                        .HasFilter("[StudentId] IS NOT NULL");

                    b.ToTable("StudentAvatar");
                });

            modelBuilder.Entity("TMSStudens.StudentHomeworksCount", b =>
                {
                    b.Property<int>("HomeworksCount")
                        .HasColumnType("int");

                    b.Property<string>("StudentName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.ToView("View_HomeworksCounts");
                });

            modelBuilder.Entity("TMSStudens.DiplomaWork", b =>
                {
                    b.HasBaseType("TMSStudens.Homework");

                    b.Property<string>("SolutionUrl")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Diplomas");
                });

            modelBuilder.Entity("TMSStudens.Homework", b =>
                {
                    b.HasOne("TMSStudens.Student", "Student")
                        .WithMany("Homeworks")
                        .HasForeignKey("NewStudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TMSStudens.Student", b =>
                {
                    b.OwnsOne("TMSStudens.Address", "Address", b1 =>
                        {
                            b1.Property<int>("StudentId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StudentId");

                            b1.ToTable("Students");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("TMSStudens.StudentAvatar", b =>
                {
                    b.HasOne("TMSStudens.Student", "Student")
                        .WithOne("Avatar")
                        .HasForeignKey("TMSStudens.StudentAvatar", "StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TMSStudens.DiplomaWork", b =>
                {
                    b.HasOne("TMSStudens.Homework", null)
                        .WithOne()
                        .HasForeignKey("TMSStudens.DiplomaWork", "HomeworkId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TMSStudens.Student", b =>
                {
                    b.Navigation("Avatar");

                    b.Navigation("Homeworks");
                });
#pragma warning restore 612, 618
        }
    }
}
